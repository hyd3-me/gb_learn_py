from datetime import datetime

DESC = '''
Информация об авторе и времени создания

Разработайте программное обеспечение для ведения журнала событий. Вам необходимо создать класс, который будет представлять строки журнала и включать в себя информацию об авторе и времени создания каждой записи.

Условие задачи:

Создайте класс MyStr, который наследуется от встроенного класса str и добавлять дополнительную информацию о создателе строки и времени ее создания. Этот класс будет представлять строки с информацией о событиях.

Класс MyStr должен иметь следующие атрибуты и методы:

value (str): Строковое значение с описанием события.
author (str): Имя автора, создавшего запись.
time: Время создания записи в формате '%Y-%m-%d %H:%M'.

Магические методы (Dunder-методы):

Реализуйте метод __new__(cls, value, author), который создает новый объект класса MyStr с заданным value и author. Метод также автоматически фиксирует время создания записи. В этом методе создается новый объект MyStr с указанными атрибутами и текущим временем в атрибуте time.

Реализуйте метод __str__(self), который возвращает строковое представление объекта класса MyStr с информацией о событии, авторе и времени создания.

Реализуйте метод __repr__(self), который возвращает строковое представление объекта класса MyStr.  
Метод __repr__ возвращает строку, которая может быть использована для создания точно такого же объектаMyStrс теми же значениямиvalueиauthor`.

Пример использования.
На входе:

event = MyStr("Завершилось тестирование", "John")
print(event)

На выходе:

Завершилось тестирование (Автор: John, Время создания: [ в формате '%Y-%m-%d %H:%M'])

На входе:

my_string = MyStr("Пример текста", "Иван")
print(my_string)

На выходе:

Пример текста (Автор: Иван, Время создания: 2023-10-10 15:56)

На входе:

my_string = MyStr("Мама мыла раму", "Маршак")
print(repr(my_string))

На выходе:

MyStr('Мама мыла раму', 'Маршак')
'''

class MyStr(str):
    def __new__(cls, value, author):
        """
        Создает новый объект класса MyStr с заданным значением и автором.

        :param cls: Класс MyStr.
        :param value: Строковое значение с описанием события.
        :param author: Имя автора, создавшего запись.
        """
        time_now = datetime.now().strftime('%Y-%m-%d %H:%M')
        return super().__new__(cls, f"{value}, {author}")
    
    def __init__(self, value, author):
        self.value = value
        self.author = author
        self.time = datetime.now()
    
    def __str__(self):
        """
        Возвращает строковое представление объекта класса MyStr с информацией о событии, авторе и времени создания.
        """
        return f"{self.value} (Автор: {self.author}, Время создания: {self.time.strftime('%Y-%m-%d %H:%M')})"

    def __repr__(self):
        """
        Возвращает строковое представление объекта класса MyStr.

        :return: Строка для создания точно такого же объекта MyStr.
        """
        return f"MyStr({self.value!r}, '{self.author}')"


# Использование класса
# mystr = MyStr("Это событие!", "Иван")
# print(mystr)  # Вывод: [2023-06-27 16:00 Иван: Это событие!]
# print(repr(mystr))  # Вывод: 'MyStr("Это событие!", author='Иван', time='2023-06-27 16:00')'

event = MyStr("Завершилось тестирование", "John")
print(event)

my_string = MyStr("Мама мыла раму", "Маршак")
print(repr(my_string))